import java.applet.* ;
import java.awt.* ;

public class Sudoku_backtrack {

  static int[][] model;
	static boolean solved;
    public static void main(String[] args) {
	// allocates memory for 10 integers
	model = new int[10][10];
	// Create the initial situation
	test();
	solved=false;
	run();
	System.out.println(""); 
	test2();
	solved=false;
	run();
	System.out.println(""); 
	test3();
	solved=false;
	run();
	}


	// Checks if num is an acceptable value for the given row 
	public static boolean checkRow( int row, int num )
	{
	  for( int col = 0; col < 9; col++ )
		if( model[row][col] == num )
			return false ;

	  return true ;
	}

	// Checks if num is an acceptable value for the given column
	public static boolean checkCol( int col, int num )
	{
		for( int row = 0; row < 9; row++ )
			if( model[row][col] == num )
				return false ;
	  return true ;
	}

	//Checks if num is an acceptable value for the box around row and col
	public static boolean checkBox( int row, int col, int num ){
		row = (row / 3) * 3 ;
		col = (col / 3) * 3 ;

		for( int r = 0; r < 3; r++ )
			for( int c = 0; c < 3; c++ )
				if( model[row+r][col+c] == num )
			return false ;
		return true ;
		}

   
	public static void run(){
		solve( 0, 0 ) ;
   }

   // Recursive function to find a valid number for one single cell 
	public static void solve( int row, int col ){
		
		// Throw an exception to stop the process if the puzzle is solved
		if( row > 8 ){															//OT TUK SI VZEMI CHISLATA OT MODEL
			for (int i=0; i<=8; i++){
				for (int j=0; j<=8; j++){
					System.out.print(model[i][j]+" "); 
				}
				System.out.print("\n");
			}
			solved=true;
			return;
		}
		if(!solved){
			// If the cell is not empty, continue with the next cell
			if( model[row][col] != 0 )
				next( row, col ) ;
			else{	// Find a valid number for the empty cell
				for( int num = 1; num < 10; num++ ){
					if( checkRow(row,num) && checkCol(col,num) && checkBox(row,col,num) ){
						model[row][col] = num ;
						next( row, col ) ;
						}
				}

			// No valid number was found, clean up and return to caller
			model[row][col] = 0 ;
			}
		}
	}

   // Calls solve for the next cell 
	public static void next( int row, int col ){ 
		if(!solved){
			if( col < 8 )
				solve( row, col + 1 ) ;
			else
				solve( row + 1, 0 ) ;
		}
	}
	public static void test(){ 
		// Clear all cells
		for( int row = 0; row < 9; row++ )
			for( int col = 0; col < 9; col++ )
				model[row][col] = 0 ;
		model[0][0] = 9 ;
		model[0][4] = 2 ;//2
		model[0][6] = 7 ;
		model[0][7] = 5 ;

		model[1][0] = 6 ;
		model[1][4] = 5 ;
		model[1][7] = 4 ;

		model[2][1] = 2 ;
		model[2][3] = 4 ;
		model[2][7] = 1 ;

		model[3][0] = 2 ;
		model[3][2] = 8 ;

		model[4][1] = 7 ;
		model[4][3] = 5 ;
		model[4][5] = 9 ;
		model[4][7] = 6 ;

		model[5][6] = 4 ;
		model[5][8] = 1 ;

		model[6][1] = 1 ;
		model[6][5] = 5 ;
		model[6][7] = 8 ;

		model[7][1] = 9 ;
		model[7][4] = 7 ;
		model[7][8] = 4 ;

		model[8][1] = 8 ;
		model[8][2] = 2 ;
		model[8][4] = 4 ;
		model[8][8] = 6 ;
	}
	public static void test2(){
		// Clear all cells
		for( int row = 0; row < 9; row++ )
			for( int col = 0; col < 9; col++ )
				model[row][col] = 0 ;
		model[0][0]=2;
		model[0][4]=4;
		model[0][5]=3;
		
		model[1][0]=4;
		model[1][1]=8;
		model[1][2]=5;
		model[1][3]=2;
		model[1][4]=7;
		model[1][7]=3;
		
		model[2][1]=6;
		model[2][2]=3;
		model[2][4]=1;
		model[2][6]=2;
		model[2][7]=4;
		
		model[3][2]=2;
		model[3][3]=7;
		model[3][7]=8;
		model[3][8]=5;
		
		model[4][1]=7;
		model[4][2]=4;
		model[4][3]=3;
		model[4][5]=5;
		model[4][6]=9;
		model[4][7]=6;
		
		model[5][0]=6;
		model[5][1]=5;
		model[5][5]=4;
		model[5][6]=7;
		
		model[6][1]=4;
		model[6][2]=6;
		model[6][4]=5;
		model[6][6]=8;
		model[6][7]=9;
		
		model[7][1]=9;
		model[7][4]=3;
		model[7][5]=7;
		model[7][6]=6;
		model[7][7]=5;
		model[7][8]=2;
		
		model[8][3]=9;
		model[8][4]=8;
		model[8][8]=4;
	} 
	public static void test3(){
		// Clear all cells
		for( int row = 0; row < 9; row++ )
			for( int col = 0; col < 9; col++ )
				model[row][col] = 0 ;
	}
	}